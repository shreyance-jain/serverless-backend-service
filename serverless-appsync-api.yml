name: appsync-graphql-api-${opt:stage}
schema: ./appsync/schema.api.graphql
authenticationType: API_KEY
apiKeys:
  - apiKey
mappingTemplatesLocation: ./appsync/mapping-templates
mappingTemplates: ${file(./appsync/mapping-templates/mapping-templates.yml)}

xrayEnabled: true # to optimise cost x-ray can be enabled based on stage

caching:
  behavior: PER_RESOLVER_CACHING # or  FULL_REQUEST_CACHING
  ttl: 3600
  atRestEncryption: true
  transitEncryption: true
  type: 'T2_SMALL'

# wafConfig: ## WAF can be enabled and custom rules can be created for security pruposes
#   enabled: true
#   name: AppSyncWaf
#   description: 'AppSync CRUD API Waf rules'
#   rules:
#     - throttle: 100
#     - name: US-and-India-Only
#       action: Block
#       statement:
#         NotStatement:
#           Statement:
#             GeoMatchStatement:
#               CountryCodes:
#                 - US
#                 - IN

dataSources:
  - type: AWS_LAMBDA
    name: createTenant
    description: 'Lambda'
    config:
      functionName: createTenantGraphQl
      iamRoleStatements:
        - Effect: "Allow"
          Action:
            - "lambda:invokeFunction"
          Resource:
            - "arn:aws:lambda:${aws:region}:${aws:accountId}:function:serverless-backend-service-${opt:stage}-createTenantGraphQl"
  - type: AWS_LAMBDA
    name: getTenant
    description: 'Lambda'
    config:
      functionName: getTenantGraphQl
      iamRoleStatements:
        - Effect: "Allow"
          Action:
            - "lambda:invokeFunction"
          Resource:
            - "arn:aws:lambda:${aws:region}:${aws:accountId}:function:serverless-backend-service-${opt:stage}-getTenantGraphQl"
  - type: AWS_LAMBDA
    name: deleteTenant
    description: 'Lambda'
    config:
      functionName: deleteTenantGraphQl
      iamRoleStatements:
        - Effect: "Allow"
          Action:
            - "lambda:invokeFunction"
          Resource:
            - "arn:aws:lambda:${aws:region}:${aws:accountId}:function:serverless-backend-service-${opt:stage}-deleteTenantGraphQl"
  - type: AWS_LAMBDA
    name: updateTenant
    description: 'Lambda'
    config:
      functionName: updateTenantGraphQl
      iamRoleStatements:
        - Effect: "Allow"
          Action:
            - "lambda:invokeFunction"
          Resource:
            - "arn:aws:lambda:${aws:region}:${aws:accountId}:function:serverless-backend-service-${opt:stage}-updateTenantGraphQl"
